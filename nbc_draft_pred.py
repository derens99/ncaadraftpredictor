# -*- coding: utf-8 -*-
"""NBC Draft Pred

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FduXTtlJ4u11cx1M0S3rXTHcor8yOfBd
"""

from google.colab import auth


auth.authenticate_user()
print('Authenticated')

import tensorflow as tf
import pandas as pd
import numpy as np

!gsutil cp gs://stardust-hackathon/ncaa-mbb/player_box.csv /tmp/
player_box = pd.read_csv("/tmp/player_box.csv")

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import VotingClassifier

!gsutil cp gs://stardust-hackathon/ncaa-mbb/player_info.csv /tmp/
player_info = pd.read_csv("/tmp/player_info.csv")

class Draft():
  def __init__(self):  
    self.data = {}
    for year in range(2014, 2019):
      self.data[year] = pd.read_csv('{0}.csv'.format(year))
      
  def drafted(self, name, year):
    keys = self.data.keys()
    if year in keys:
      dataset = self.data[year]
      for player in dataset.Player:
        if name == player:
          return 1
    return 0
      
    
draft = Draft()
print(draft.drafted('Markelle Fultz', 2017))

!gsutil cp gs://stardust-hackathon/ncaa-mbb/player_info.csv /tmp/

player_info = pd.read_csv("/tmp/player_info.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000000.csv /tmp/
# pbp_000000000000 = pd.read_csv("/tmp/pbp_000000000000.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000001.csv /tmp/
# pbp_000000000001 = pd.read_csv("/tmp/pbp_000000000001.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000002.csv /tmp/
# pbp_000000000002 = pd.read_csv("/tmp/pbp_000000000002.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000003.csv /tmp/
# pbp_000000000003 = pd.read_csv("/tmp/pbp_000000000003.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000004.csv /tmp/
# pbp_000000000004 = pd.read_csv("/tmp/pbp_000000000004.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000005.csv /tmp/
# pbp_000000000005 = pd.read_csv("/tmp/pbp_000000000005.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000006.csv /tmp/
# pbp_000000000006 = pd.read_csv("/tmp/pbp_000000000006.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000007.csv /tmp/
# pbp_000000000007 = pd.read_csv("/tmp/pbp_000000000007.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000008.csv /tmp/
# pbp_000000000008 = pd.read_csv("/tmp/pbp_000000000008.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/pbp_000000000009.csv /tmp/
# pbp_000000000009 = pd.read_csv("/tmp/pbp_000000000009.csv")

# pbp = pd.concat([pbp_000000000000, pbp_000000000001, pbp_000000000002,
#                 pbp_000000000003, pbp_000000000004, pbp_000000000005,
#                 pbp_000000000006, pbp_000000000007, pbp_000000000008, 
#                 pbp_000000000009])

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/metrics.csv /tmp/
# metrics = pd.read_csv("/tmp/metrics.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/seasons.csv /tmp/
# seasons = pd.read_csv("/tmp/seasons.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/team_box.csv /tmp/
# team_box = pd.read_csv("/tmp/team_box.csv")

# !gsutil cp gs://stardust-hackathon/ncaa-mbb/team_info.csv /tmp/
# team_info = pd.read_csv("/tmp/team_info.csv")

!gsutil cp gs://stardust-hackathon/ncaa-mbb/name /tmp/



# player_box[['first_name', 'last_name', 'team_code', 'season', 'player_id', "pts", "fga", "fga3", "fgm", "fgm3", "fta", "ftm", "ast", "blk", "stl", "dreb", "oreb", "reb", "pf", "tf", "tov", "mins_played"]]

player_info[["grade_level", "division", "first_name", "last_name", "height_in", "season", "school", "conference_id", "player_id", "position"]]

player_box = player_box[player_box['player_id']!=-101]
player_box = player_box[~player_box['player_id'].isnull()]
player_box = player_box[player_box['season']!=None]
player_box = player_box[player_box['season']!=2018]

player_info = player_info[player_info['player_id']!=-101]
player_info = player_info[~player_info['player_id'].isnull()]
player_info = player_info[player_info['season']!=None]
player_info = player_info[player_info['season']!=2018]
player_info = player_info[~player_info['first_name'].isnull()]

player_box["player_id_AND_season"] = player_box["player_id"].map(int).map(str) + "_AND_" + player_box["season"].map(int).map(str)

player_info["player_id_AND_season"] = player_info["player_id"].map(int).map(str) + "_AND_" + player_info["season"].map(int).map(str)

player_stats = pd.merge(player_box, player_info, on='player_id_AND_season', how='outer')



list(player_stats)

list(player_stats)
player_stats = player_stats[['pts', 'fga', 'fga3', 'fgm', 'fgm3', 'fta', 'ftm', 'ast', 'blk', 'stl', 'dreb', 'oreb', 'reb', 'pf', 'tf', 'tov', 'mins_played', 'grade_level', 'division', 'first_name', 'last_name', 'height_in',

'school', 'conference', 'position', "season_x"]]

player_stats

len(player_stats[~player_stats['pts'].isnull()])

working_dataset = (player_stats[~player_stats['pts'].isnull()])
list(working_dataset)

working_dataset = working_dataset[["first_name", "last_name", 'pts', 'fga', 'fga3', 'fgm', 'fgm3', 'fta', 'ftm', 'ast', 'blk', 'stl', 'dreb', 'oreb', 'reb', 'pf', 'tf', 'tov', 'mins_played', 'grade_level', 'division',"height_in", "season_x"]]

working_dataset = working_dataset.dropna()
# working_dataset = working_dataset[~working_dataset.index.duplicated()]
# working_dataset = working_dataset[~working_dataset['division'].isnull()]
# working_dataset = working_dataset[~working_dataset['first_name'].isnull()]
#working_dataset = working_dataset[~working_dataset['first_name'].isnull()]

list(working_dataset)

# player_stats_2014 = player_stats[player_stats['season_x']==2014]
# player_stats_2015 = player_stats[player_stats['season_x']==2015]
# player_stats_2016 = player_stats[player_stats['season_x']==2016]
# player_stats_2017 = player_stats[player_stats['season_x']==2017]

Y = np.zeros((working_dataset.shape[0], 1))

iter = working_dataset.iterrows()
for i, row in enumerate(iter):
  name = str(row[1].first_name) + ' ' + str(row[1].last_name)
  #print(name)
  if name != 'Opponent Stats Do Not Modify' and draft.drafted(name, row[1]['season_x']+1):
    Y[i] = [1]

list(working_dataset)

X = working_dataset
X = X[[
 'pts',
 'fga',
 'fga3',
 'fgm',
 'fgm3',
 'fta',
 'ftm',
 'ast',
 'blk',
 'stl',
 'dreb',
 'oreb',
 'reb',
 'pf',
 'tf',
 'tov',
 'mins_played',
 'grade_level',
 'division',
 'height_in']]

# def temp(first_name, last_name, season):
  
#   retr

# draft.drafted(name, season+1)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X.values, Y, test_size=0.2, random_state=42)

# from sklearn.tree import DecisionTreeClassifier


# tree_clf = DecisionTreeClassifier(max_depth=4, random_state=42)
# tree_clf.fit(X_train, y_train)

# from sklearn.tree import export_graphviz

# export_graphviz(
#         tree_clf,
#         out_file="/tmp/iris_tree.dot",
#         feature_names=iris.feature_names[2:],
#         class_names=iris.target_names,
#         rounded=True,
#         filled=True
#     )

log_clf = LogisticRegression(random_state=42)
rnd_clf = RandomForestClassifier(random_state=42)
svm_clf = SVC(probability=True, random_state=42)

rnd_clf.fit(X_train, y_train)

voting_clf = VotingClassifier(
    estimators=[('lr', log_clf), ('rf', rnd_clf), ('svc', svm_clf)],
    voting='soft', n_jobs=-1)

voting_clf.fit(X_train, y_train)

from sklearn.metrics import accuracy_score

for clf in (log_clf, rnd_clf, svm_clf, voting_clf):
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))

print('hi')

